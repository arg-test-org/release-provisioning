import json
import boto3
import requests
import urllib
import flask
from flask_cors import CORS
import logging
import os
from slack_webhook import Slack

def get_token():
    secret_name = "{{ awssm }}"
    region_name = "us-east-1"

    # Create a Secrets Manager client
    session = boto3.session.Session()
    client = session.client(
        service_name='secretsmanager',
        region_name=region_name
    )

    try:
        get_secret_value_response = client.get_secret_value(
            SecretId=secret_name
        )
    except Exception as e:
        raise e
    else:
        # Check if it uses SecretString or SecretBinary
        if 'SecretString' in get_secret_value_response:
            secret_string = get_secret_value_response['SecretString']
            # The secret is a JSON string, so parse it to get the value of "DOPPLER_TOKEN"
            secret_dict = json.loads(secret_string)
            return secret_dict['DOPPLER_TOKEN']
        else:
            # For SecretBinary, this example simply returns the original binary value. 
            # Depending on your use case, you may need to decode or deserialize this value.
            return get_secret_value_response['SecretBinary']

doppler_token = get_token()
project = "auth"
config = "stg"
url = "https://api.doppler.com/v3/configs/config/secret?project=" + project + "&config=" + config + "&name="

headers = {
    "accept": "application/json",
    "authorization": "Bearer " + doppler_token
}


def send_to_slack(text):
    webhook_url = json.loads(requests.get(url + "SLACK_ALERT_WEBHOOK_URL", headers=headers).text)['value']['raw']
    slack = Slack(url=webhook_url)
    slack.post(text=text)

# TODO: change this according your needs
sentry_host = json.loads(requests.get(url + "SENTRY_TUNNEL_DSN", headers=headers).text)['value']['raw']
known_project_ids = [json.loads(requests.get(url + "SENTRY_TUNNEL_KNOWNIDS", headers=headers).text)['value']['raw']]

app = flask.Flask(__name__)
CORS(app)

@app.route('/')
def hello():
    return 'Malformed Request; please try again. Contact your Administrator if issues persist. 0xID10T  [[INVALID_HANDLE]]'

@app.route("/report", methods=["POST"])
def bugs():
    try:
        envelope = flask.request.data
        piece = envelope.split(b"\n")[0].decode("utf-8")
        header = json.loads(piece)
        dsn = urllib.parse.urlparse(header.get("dsn"))

        if dsn.hostname != sentry_host:
            raise Exception(f"Invalid Sentry host: {dsn.hostname}")

        project_id = dsn.path.strip("/")
        if project_id not in known_project_ids:
            raise Exception(f"Invalid Project ID: {project_id}")

        url = f"https://{sentry_host}/api/{project_id}/envelope/"

        requests.post(url=url, data=envelope, headers={"Content-Type": "application/x-sentry-envelope"})
    except Exception as e:
        # handle exception in your preferred style,
        # e.g. by logging or forwarding to Sentry
        send_to_slack("[SentryTunnel]: " + str(e))
        logging.exception(e)

    return {}

if __name__ == "__main__":
    env = os.getenv('ENV', 'dev')
    if env == 'prod':
        from gunicorn.app.wsgiapp import WSGIApplication
        application = WSGIApplication()
        application.run()
    else:
        app.run(host="0.0.0.0")




# export ENV=prod
# gunicorn app:app
# python3 -c "import os, gunicorn; print(os.path.dirname(gunicorn.__file__))"